from PyQt5.QtGui import *
from bs4 import BeautifulSoup as bs
from PyQt5 import QtCore, QtGui, QtWidgets
from src.bin.nano_client import Ui_NanoVPN_Client
import os, sys, urllib.request, webbrowser, time, json, requests
from PyQt5.QtWidgets import QApplication, QPushButton, QMessageBox, QLineEdit

timeout = 0
port = 8000

proxies = [
'1.1.1.1:12',
'2.2.2.2:13',
'3.3.3.3:14'
]

country_host = [
'1.1.1.1',
'2.2.2.2',
'3.3.3.3',
'4.4.4.4'
]

class Ui_NanoVPN_Login(object):
    def tos_link_open(self):
        webbrowser.open('https://discord.gg/Qe2527z')

    def login_client(self, tos_agree_check):
        global timeout
        username = self.username_entry.text()
        password = self.password_entry.text()
        timeout += 1
        if username == 'user' and password == 'pass' and timeout <=4 and tos_agree_check == True:
            self.window =QtWidgets.QMainWindow()
            self.ui =Ui_NanoVPN_Client()
            self.ui.setupUi(self.window)
            time.sleep(2.5)
            self.window.show()
            NanoVPN_Login.hide()
        elif username != 'user' or password != 'pass':
            msg = QMessageBox()
            msg.setWindowIcon(QIcon('src/img/ico.ico'))              
            msg.setWindowTitle('Warning')
            msg.setText('Invalid credentials, please contact our support')
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setDefaultButton(QMessageBox.Ok)
            x = msg.exec_()             
        elif tos_agree_check != True:
            msg = QMessageBox()
            msg.setWindowIcon(QIcon('src/img/ico.ico'))
            msg.setWindowTitle('Warning')
            msg.setText('Please agree with our terms of service')
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setDefaultButton(QMessageBox.Ok)
            x = msg.exec_()
        else:
            msg = QMessageBox()
            msg.setWindowIcon(QIcon('src/img/ico.ico'))
            msg.setWindowTitle('Error')
            msg.setText('Too many login attempts, please try again later')
            msg.setIcon(QMessageBox.Critical)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setDefaultButton(QMessageBox.Ok)
            x = msg.exec_()
            sys.exit()         

    def information(self):
       msg = QMessageBox()
       msg.setWindowIcon(QIcon('src/img/ico.ico'))       
       msg.setWindowTitle('Information')
       msg.setText('Nano Vurtual Private Network v3.0\nApp Developer: weasley#9884\nContact us: https://discord.gg/Qe2527z')
       msg.setIcon(QMessageBox.Information)
       msg.setStandardButtons(QMessageBox.Ok)
       msg.setDefaultButton(QMessageBox.Ok)
       x = msg.exec_()

    def close_client(self):
       msg = QMessageBox()
       msg.setWindowIcon(QIcon('src/img/ico.ico'))      
       msg.setWindowTitle('Exit Client')
       msg.setText('Are you sure you want to exit the client?')
       msg.setIcon(QMessageBox.Question)
       msg.setStandardButtons(QMessageBox.Yes| QMessageBox.No)
       msg.setDefaultButton(QMessageBox.No)
       x = msg.exec_()
       if x == QMessageBox.Yes:
           sys.exit()
       else:
           return

    def setupUi(self, NanoVPN_Login):
        NanoVPN_Login.setObjectName("NanoVPN_Login")
        NanoVPN_Login.setFixedSize(250,340)
        NanoVPN_Login.setWindowIcon(QIcon('src/img/ico.ico'))
        #NanoVPN_Login.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False)       
        self.centralwidget = QtWidgets.QWidget(NanoVPN_Login)
        self.centralwidget.setObjectName("centralwidget")
        self.titlelabel2 = QtWidgets.QLabel(self.centralwidget)
        self.titlelabel2.setGeometry(QtCore.QRect(120, 30, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.titlelabel2.setFont(font)
        self.titlelabel2.setObjectName("titlelabel2")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(80, 30, 51, 21))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(29, 121, 13))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 121, 13))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.title_label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.info_button_login = QtWidgets.QPushButton(self.centralwidget)
        self.info_button_login.setGeometry(QtCore.QRect(0, 290, 31, 23))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        self.info_button_login.setFont(font)
        self.info_button_login.setCursor(QtGui.QCursor(QtCore.Qt.WhatsThisCursor))
        self.info_button_login.setObjectName("info_button_login")
        self.exit_button_login = QtWidgets.QPushButton(self.centralwidget)
        self.exit_button_login.setGeometry(QtCore.QRect(170, 290, 75, 23))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        self.exit_button_login.setFont(font)
        self.exit_button_login.setObjectName("exit_button_login")
        self.login_label = QtWidgets.QLabel(self.centralwidget)
        self.login_label.setGeometry(QtCore.QRect(70, 60, 151, 21))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.login_label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.login_label.setFont(font)
        self.login_label.setObjectName("login_label")
        self.tos_agree_check = QtWidgets.QCheckBox(self.centralwidget)
        self.tos_agree_check.setGeometry(QtCore.QRect(60, 220, 81, 17))
        self.tos_agree_check.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.tos_agree_check.setObjectName("tos_agree_check")
        self.tos_link = QtWidgets.QCommandLinkButton(self.centralwidget)
        self.tos_link.setGeometry(QtCore.QRect(130, 210, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(6)
        self.tos_link.setFont(font)
        self.tos_link.setObjectName("tos_link")
        self.login_button = QtWidgets.QPushButton(self.centralwidget)
        self.login_button.setGeometry(QtCore.QRect(80, 190, 75, 23))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        self.login_button.setFont(font)
        self.login_button.setObjectName("login_button")
        self.username_entry = QtWidgets.QLineEdit(self.centralwidget)
        self.username_entry.setGeometry(QtCore.QRect(60, 110, 113, 20))
        self.username_entry.setObjectName("username_entry")
        self.password_entry = QtWidgets.QLineEdit(self.centralwidget)
        self.password_entry.setGeometry(QtCore.QRect(60, 160, 113, 20))
        self.password_entry.setObjectName("password_entry")
        self.password_entry.setEchoMode(QLineEdit.Password)        
        self.username_label = QtWidgets.QLabel(self.centralwidget)
        self.username_label.setGeometry(QtCore.QRect(80, 90, 71, 16))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(29, 121, 13))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 121, 13))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.username_label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        self.username_label.setFont(font)
        self.username_label.setObjectName("username_label")
        self.password_label = QtWidgets.QLabel(self.centralwidget)
        self.password_label.setGeometry(QtCore.QRect(80, 140, 71, 16))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(29, 121, 13))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 121, 13))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.password_label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        self.password_label.setFont(font)
        self.password_label.setObjectName("password_label")
        NanoVPN_Login.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(NanoVPN_Login)
        self.statusbar.setObjectName("statusbar")
        NanoVPN_Login.setStatusBar(self.statusbar)

        self.retranslateUi(NanoVPN_Login)
        QtCore.QMetaObject.connectSlotsByName(NanoVPN_Login)

        self.exit_button_login.clicked.connect(self.close_client)
        self.info_button_login.clicked.connect(self.information)
        self.login_button.clicked.connect(lambda: self.login_client(self.tos_agree_check.isChecked()))
        self.tos_link.clicked.connect(self.tos_link_open)      
    def retranslateUi(self, NanoVPN_Login):
        _translate = QtCore.QCoreApplication.translate
        NanoVPN_Login.setWindowTitle(_translate("NanoVPN_Login", "NanoVPN"))
        self.titlelabel2.setText(_translate("NanoVPN_Login", "VPN"))
        self.title_label.setText(_translate("NanoVPN_Login", "Nano"))
        self.info_button_login.setText(_translate("NanoVPN_Login", "(i)"))
        self.exit_button_login.setText(_translate("NanoVPN_Login", "Exit"))
        self.login_label.setText(_translate("NanoVPN_Login", "Nano Login"))
        self.tos_agree_check.setText(_translate("NanoVPN_Login", "I agree with"))
        self.tos_link.setText(_translate("NanoVPN_Login", "TOS"))
        self.login_button.setText(_translate("NanoVPN_Login", "Login"))
        self.username_label.setText(_translate("NanoVPN_Login", "Username"))
        self.password_label.setText(_translate("NanoVPN_Login", "Password"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    NanoVPN_Login = QtWidgets.QMainWindow()
    ui = Ui_NanoVPN_Login()
    ui.setupUi(NanoVPN_Login)
    NanoVPN_Login.show()
    sys.exit(app.exec_())
